generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id              String          @id           @default(uuid())
  username        String
  profilePicture  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Model{
  id             String           @id           @default(uuid())
  name           String
  type           ModelTypeEnum
  age            Int
  ethinicity     EthninictyEnum
  eyeColor       EyeColorEnum
  bald           Boolean
  userId         String
  triggerWord    String?
  tensorPath     String?
  trainingStatus ModelTrainingStatusEnum @default(Pending)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  outputImages   OutputImages[]
  falAiRequestId String?
  zipUrl         String
  @@index([falAiRequestId])
}

model OutputImages{
  id              String          @id             @default(uuid())
  imageUrl        String          @default("")
  modelId         String
  userId          String
  prompt          String
  falAiRequestId  String?
  status          OutputImageStatusEnum             @default(Pending)
  model           Model           @relation(fields: [modelId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  @@index([falAiRequestId])
}

model Packs {
  id        String   @id @default(uuid())
  name      String
  prompts   PackPrompts[]
}


model PackPrompts {
  id        String    @id @default(uuid())
  prompt    String
  packId    String
  pack      Packs    @relation(fields: [packId], references: [id])
}

enum ModelTypeEnum {
  Man
  Woman
  Others
}

enum EthninictyEnum {
  White
  Black
  Asian_American    @map("Asian American")
  East_Asian        @map("East Asian")
  South_East_Asian  @map("South East Asian")
  South_Asian       @map("South Asian")
  Middle_Eastern    @map("Middle Eastern")
  Pacific
  Hispanic
}

enum EyeColorEnum {
  Black
  Brown
  Blue
  Hazel
  Gray
  Green
}

enum OutputImageStatusEnum {
  Pending
  Generated
  Failed
}


enum ModelTrainingStatusEnum {
  Pending
  Generated
  Failed
}